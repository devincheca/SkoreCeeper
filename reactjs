import React from "react";
import ReactDOM from "react-dom";

function ScoreHeader(props) {
    return (
      <div className="w3-red w3-border">
        <span className={screen.availWidth < 1440 ? "w3-hide" : "w3-left"}>Player Name</span>
        <span className={screen.availWidth < 1440 ? "w3-hide" : "w3-center"}>Player Counters</span>
        <span className={screen.availWidth < 1440 ? "w3-hide" : "w3-right"}>Player Points</span>
      </div>
    );
}

class PlayerInfo extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
  }
  
  handleChange() {
    this.props.onUserInput(
      this.playernameInput.value,
      this.playercountersInput.value,
      this.playerpointsInput.value,
      this.props.id
    );
  }
  
  render() {
    return (
      <div>
      <form>
      <div className={screen.availWidth < 1440 ? "" : "w3-third"}>
        <input
          type="text"
          placeholder={this.props.playername}
          value={this.props.playername}
          ref={(input) => this.playernameInput = input}
          onChange={this.handleChange}
          />
      </div>
      <div className={screen.availWidth < 1440 ? "" : "w3-third"}>
        <input
          type="number"
          placeholder={this.props.playercounters}
          value={this.props.playercounters}
          ref={(input) => this.playercountersInput = input}
          onChange={this.handleChange}
          />
      </div>
      <div className={screen.availWidth < 1440 ? "" : "w3-third"}>
        <input
          type="number"
          placeholder={this.props.playerpoints}
          value={this.props.playerpoints}
          ref={(input) => this.playerpointsInput = input}
          onChange={this.handleChange}
          />
      </div>
      </form>
      </div>
    );
  }
}

class Score extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      player1name: "Player 1",
      player1points: "Player 1 Points",
      player1counters: "Player 1 Counters",
      player2name: "Player 2",
      player2points: "Player 2 Points",
      player2counters: "Player 2 Counters",
      player3name: "Player 3",
      player3points: "Player 3 Points",
      player3counters: "Player 3 Counters",
      player4name: "Player 4",
      player4points: "Player 4 Points",
      player4counters: "Player 4 Counters"
    };
    
    this.handleUserInput = this.handleUserInput.bind(this);
    this.initScore = this.initScore.bind(this);
  }
  handleUserInput(playername,playercounters,playerpoints,id) {
    switch(id) {
      case "1":
        this.setState({
          player1name: playername,
          player1counters: playercounters,
          player1points: playerpoints
        });
        break;
      case "2":
        this.setState({
          player2name: playername,
          player2counters: playercounters,
          player2points: playerpoints
        });
        break;
      case "3":
        this.setState({
          player3name: playername,
          player3counters: playercounters,
          player3points: playerpoints
        });
        break;
      case "4":
        this.setState({
          player4name: playername,
          player4counters: playercounters,
          player4points: playerpoints
        });
        break;
      default:
        break;
    }
  }
  initScore(gamename) {
    switch(gamename) {
      case "Magic the Gathering":
        this.setState({
          player1points: 20,
          player2points: 20,
          player3points: 20,
          player4points: 20,
          player1counters: 0,
          player2counters: 0,
          player3counters: 0,
          player4counters: 0
        });
        break;
      case "Yugioh":
        this.setState({
          player1points: 8000,
          player2points: 8000,
          player3points: 8000,
          player4points: 8000,
          player1counters: 0,
          player2counters: 0,
          player3counters: 0,
          player4counters: 0
        });
        break;
      case "Monopoly":
        this.setState({
          player1points: 1500,
          player2points: 1500,
          player3points: 1500,
          player4points: 1500,
          player1counters: 0,
          player2counters: 0,
          player3counters: 0,
          player4counters: 0
        });
        break;
      case "Start at Zero":
        this.setState({
          player1points: 0,
          player2points: 0,
          player3points: 0,
          player4points: 0,
          player1counters: 0,
          player2counters: 0,
          player3counters: 0,
          player4counters: 0
        });
        break;
      default:
        break;
    }
  }
  render() {
    return (
      <div>
        <GameList 
          onUpdate={this.initScore} 
          />
        <div className="w3-green">
        <ScoreHeader />
        </div>
        <hr />
        <PlayerInfo 
          id="1"
          playername={this.state.player1name}
          playerpoints={this.state.player1points}
          playercounters={this.state.player1counters}
          onUserInput={this.handleUserInput}
        />
        <br />
        <PlayerInfo 
          id="2"
          playername={this.state.player2name}
          playerpoints={this.state.player2points}
          playercounters={this.state.player2counters}
          onUserInput={this.handleUserInput}
        />
        <br />
        <PlayerInfo 
          id="3"
          playername={this.state.player3name}
          playerpoints={this.state.player3points}
          playercounters={this.state.player3counters}
          onUserInput={this.handleUserInput}
        />
        <br />
        <PlayerInfo 
          id="4"
          playername={this.state.player4name}
          playerpoints={this.state.player4points}
          playercounters={this.state.player4counters}
          onUserInput={this.handleUserInput}
        />
        <hr />
      </div>
    );
  }
}

// these need to be buttons to initialize stuff
class GameButton extends React.Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    this.props.onClick(
      this.props.gamename
    );
  }
  render() {
    return (
      <div>
        <button 
          className="w3-btn w3-ripple"
          onClick={this.handleClick}
          >
          {this.props.gamename}
        </button>
      </div>
    );
  }
}

class GameList extends React.Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick(gamename) {
    this.props.onUpdate(gamename);
  }
  render() {
    return (
    <div>
    <div className="w3-red w3-padding w3-border">
      Choose Game:
    </div>
    <div className="w3-blue w3-padding">
      <GameButton 
        gamename="Magic the Gathering"
        onClick={this.handleClick}
        />
      <GameButton 
        gamename="Yugioh" 
        onClick={this.handleClick}
        />
      <GameButton 
        gamename="Monopoly" 
        onClick={this.handleClick}
        />
      <GameButton 
        gamename="Start at Zero" 
        onClick={this.handleClick}
        />
    </div>
    </div>
    );
  }
}

class Init extends React.Component {
  render() {
    return (
      <div>
        <Score className="w3-padding"/>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Init 
    className="w3-center w3-container w3-border w3-padding"
    />,
  document.getElementById('root')
);
